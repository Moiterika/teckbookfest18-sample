package io

import (
	"database/sql"
	"fmt"
	"strings"

	"github.com/shopspring/decimal"

	"teckbookfest18-sample/domain"
)

// repo仕訳 はSQLiteを使用して仕訳データを永続化する実装です
type repo仕訳 struct {
	db *sql.DB
}

// NewSQLite仕訳Repo は新しいSQLite仕訳リポジトリインスタンスを作成します
func NewSQLite仕訳Repo(db *sql.DB) *repo仕訳 {
	return &repo仕訳{db: db}
}

// テーブル作成用のSQLを定義
func (r *repo仕訳) CreateTableIfNotExists() error {
	_, err := r.db.Exec(`
		CREATE TABLE IF NOT EXISTS 仕訳 (
			番号 BIGINT,
			取引日 TEXT,
			管理番号 TEXT,
			借方勘定科目 TEXT,
			借方決算書表示名 TEXT,
			借方勘定科目ショートカット1 TEXT,
			借方勘定科目ショートカット2 TEXT,
			借方金額 BIGINT,
			借方税区分 TEXT,
			借方税金額 BIGINT,
			借方内税外税 TEXT,
			借方税率 BIGINT,
			借方軽減税率有無 TEXT,
			借方取引先コード TEXT,
			借方取引先名 TEXT,
			借方取引先ショートカット1 TEXT,
			借方取引先ショートカット2 TEXT,
			借方品目 TEXT,
			借方品目ショートカット1 TEXT,
			借方品目ショートカット2 TEXT,
			借方補助科目名 TEXT,
			借方補助科目ショートカット1 TEXT,
			借方補助科目ショートカット2 TEXT,
			借方部門 TEXT,
			借方部門ショートカット1 TEXT,
			借方部門ショートカット2 TEXT,
			借方メモ TEXT,
			借方メモショートカット1 TEXT,
			借方メモショートカット2 TEXT,
			借方セグメント1 TEXT,
			借方セグメント1ショートカット1 TEXT,
			借方セグメント1ショートカット2 TEXT,
			借方セグメント2 TEXT,
			借方セグメント2ショートカット1 TEXT,
			借方セグメント2ショートカット2 TEXT,
			借方セグメント3 TEXT,
			借方セグメント3ショートカット1 TEXT,
			借方セグメント3ショートカット2 TEXT,
			借方備考 TEXT,
			貸方勘定科目 TEXT,
			貸方決算書表示名 TEXT,
			貸方勘定科目ショートカット1 TEXT,
			貸方勘定科目ショートカット2 TEXT,
			貸方金額 BIGINT,
			貸方税区分 TEXT,
			貸方税金額 BIGINT,
			貸方内税外税 TEXT,
			貸方税率 BIGINT,
			貸方軽減税率有無 TEXT,
			貸方取引先コード TEXT,
			貸方取引先名 TEXT,
			貸方取引先ショートカット1 TEXT,
			貸方取引先ショートカット2 TEXT,
			貸方品目 TEXT,
			貸方品目ショートカット1 TEXT,
			貸方品目ショートカット2 TEXT,
			貸方補助科目名 TEXT,
			貸方補助科目ショートカット1 TEXT,
			貸方補助科目ショートカット2 TEXT,
			貸方部門 TEXT,
			貸方部門ショートカット1 TEXT,
			貸方部門ショートカット2 TEXT,
			貸方メモ TEXT,
			貸方メモショートカット1 TEXT,
			貸方メモショートカット2 TEXT,
			貸方セグメント1 TEXT,
			貸方セグメント1ショートカット1 TEXT,
			貸方セグメント1ショートカット2 TEXT,
			貸方セグメント2 TEXT,
			貸方セグメント2ショートカット1 TEXT,
			貸方セグメント2ショートカット2 TEXT,
			貸方セグメント3 TEXT,
			貸方セグメント3ショートカット1 TEXT,
			貸方セグメント3ショートカット2 TEXT,
			貸方備考 TEXT,
			決算整理仕訳 TEXT,
			発行元 TEXT,
			作成日時 TEXT,
			更新日時 TEXT,
			承認状況仕訳承認 TEXT,
			申請者仕訳承認 TEXT,
			申請日時仕訳承認 TEXT,
			承認者仕訳承認 TEXT,
			承認日時仕訳承認 TEXT,
			作成者 TEXT,
			消費税経理処理方法 TEXT,
			取引ID TEXT,
			口座振替ID TEXT,
			振替伝票ID TEXT,
			仕訳ID TEXT,
			仕訳番号 TEXT,
			期末日取引フラグ TEXT,
			取引支払日 TEXT,
			仕訳行番号 TEXT,
			仕訳行数 TEXT,
			レコード番号 TEXT,
			取引内容 TEXT,
			登録した方法 TEXT,
			経費精算申請番号 TEXT,
			支払依頼申請番号 TEXT,
			PRIMARY KEY (仕訳ID, 仕訳行番号)
		)
	`)
	if err != nil {
		return err
	}

	_, err = r.db.Exec(`
		CREATE TABLE IF NOT EXISTS 仕訳詳細 (
			仕訳ID TEXT,
			仕訳行番号 TEXT,
			計上年月 TEXT,
			コストプール TEXT,
			按分ルール1 TEXT,
			按分ルール2 TEXT,
			PRIMARY KEY (仕訳ID, 仕訳行番号)
		)
	`)
	return err
}

// Save は仕訳データをデータベースに保存します
func (r *repo仕訳) Save(仕訳一覧 []*domain.Ent仕訳) error {
	// トランザクション開始
	tx, err := r.db.Begin()
	if err != nil {
		return fmt.Errorf("トランザクション開始エラー: %w", err)
	}

	// 仕訳テーブル洗い替え
	// 仕訳テーブルの内容をクリア (SQLite3では TRUNCATE がないため DELETE FROM を使用)
	_, err = tx.Exec("DELETE FROM 仕訳")
	if err != nil {
		tx.Rollback()
		return fmt.Errorf("テーブルクリアエラー: %w", err)
	}

	// INSERT用のプレースホルダーとフィールド名を構築
	fields := []string{
		"番号", "取引日", "管理番号", "借方勘定科目", "借方決算書表示名", "借方勘定科目ショートカット1",
		"借方勘定科目ショートカット2", "借方金額", "借方税区分", "借方税金額", "借方内税外税", "借方税率",
		"借方軽減税率有無", "借方取引先コード", "借方取引先名", "借方取引先ショートカット1", "借方取引先ショートカット2",
		"借方品目", "借方品目ショートカット1", "借方品目ショートカット2", "借方補助科目名", "借方補助科目ショートカット1",
		"借方補助科目ショートカット2", "借方部門", "借方部門ショートカット1", "借方部門ショートカット2", "借方メモ",
		"借方メモショートカット1", "借方メモショートカット2", "借方セグメント1", "借方セグメント1ショートカット1",
		"借方セグメント1ショートカット2", "借方セグメント2", "借方セグメント2ショートカット1", "借方セグメント2ショートカット2",
		"借方セグメント3", "借方セグメント3ショートカット1", "借方セグメント3ショートカット2", "借方備考", "貸方勘定科目",
		"貸方決算書表示名", "貸方勘定科目ショートカット1", "貸方勘定科目ショートカット2", "貸方金額", "貸方税区分",
		"貸方税金額", "貸方内税外税", "貸方税率", "貸方軽減税率有無", "貸方取引先コード", "貸方取引先名",
		"貸方取引先ショートカット1", "貸方取引先ショートカット2", "貸方品目", "貸方品目ショートカット1", "貸方品目ショートカット2",
		"貸方補助科目名", "貸方補助科目ショートカット1", "貸方補助科目ショートカット2", "貸方部門", "貸方部門ショートカット1",
		"貸方部門ショートカット2", "貸方メモ", "貸方メモショートカット1", "貸方メモショートカット2", "貸方セグメント1",
		"貸方セグメント1ショートカット1", "貸方セグメント1ショートカット2", "貸方セグメント2", "貸方セグメント2ショートカット1",
		"貸方セグメント2ショートカット2", "貸方セグメント3", "貸方セグメント3ショートカット1", "貸方セグメント3ショートカット2",
		"貸方備考", "決算整理仕訳", "発行元", "作成日時", "更新日時", "承認状況仕訳承認", "申請者仕訳承認",
		"申請日時仕訳承認", "承認者仕訳承認", "承認日時仕訳承認", "作成者", "消費税経理処理方法", "取引ID",
		"口座振替ID", "振替伝票ID", "仕訳ID", "仕訳番号", "期末日取引フラグ", "取引支払日", "仕訳行番号",
		"仕訳行数", "レコード番号", "取引内容", "登録した方法", "経費精算申請番号", "支払依頼申請番号",
	}
	placeholders := make([]string, len(fields))
	for i := range placeholders {
		placeholders[i] = "?"
	}

	cmd := fmt.Sprintf(`INSERT INTO 仕訳 (%s) VALUES (%s)`,
		strings.Join(fields, ", "),
		strings.Join(placeholders, ", "))

	// プリペアードステートメント作成
	stmt, err := tx.Prepare(cmd)
	if err != nil {
		tx.Rollback()
		return fmt.Errorf("プリペアードステートメント作成エラー: %w", err)
	}
	defer stmt.Close()

	// 各仕訳データを挿入
	for _, 仕訳 := range 仕訳一覧 {
		_, err = stmt.Exec(
			仕訳.FldNo,
			仕訳.Fld取引日,
			仕訳.Fld管理番号,
			仕訳.Fld借方勘定科目,
			仕訳.Fld借方決算書表示名,
			仕訳.Fld借方勘定科目ショートカット1,
			仕訳.Fld借方勘定科目ショートカット2,
			仕訳.Fld借方金額.IntPart(),
			仕訳.Fld借方税区分,
			仕訳.Fld借方税金額.IntPart(),
			仕訳.Fld借方内税外税,
			仕訳.Fld借方税率.IntPart(),
			仕訳.Fld借方軽減税率有無,
			仕訳.Fld借方取引先コード,
			仕訳.Fld借方取引先名,
			仕訳.Fld借方取引先ショートカット1,
			仕訳.Fld借方取引先ショートカット2,
			仕訳.Fld借方品目,
			仕訳.Fld借方品目ショートカット1,
			仕訳.Fld借方品目ショートカット2,
			仕訳.Fld借方補助科目名,
			仕訳.Fld借方補助科目ショートカット1,
			仕訳.Fld借方補助科目ショートカット2,
			仕訳.Fld借方部門,
			仕訳.Fld借方部門ショートカット1,
			仕訳.Fld借方部門ショートカット2,
			仕訳.Fld借方メモ,
			仕訳.Fld借方メモショートカット1,
			仕訳.Fld借方メモショートカット2,
			仕訳.Fld借方セグメント1,
			仕訳.Fld借方セグメント1ショートカット1,
			仕訳.Fld借方セグメント1ショートカット2,
			仕訳.Fld借方セグメント2,
			仕訳.Fld借方セグメント2ショートカット1,
			仕訳.Fld借方セグメント2ショートカット2,
			仕訳.Fld借方セグメント3,
			仕訳.Fld借方セグメント3ショートカット1,
			仕訳.Fld借方セグメント3ショートカット2,
			仕訳.Fld借方備考,
			仕訳.Fld貸方勘定科目,
			仕訳.Fld貸方決算書表示名,
			仕訳.Fld貸方勘定科目ショートカット1,
			仕訳.Fld貸方勘定科目ショートカット2,
			仕訳.Fld貸方金額.IntPart(),
			仕訳.Fld貸方税区分,
			仕訳.Fld貸方税金額.IntPart(),
			仕訳.Fld貸方内税外税,
			仕訳.Fld貸方税率.IntPart(),
			仕訳.Fld貸方軽減税率有無,
			仕訳.Fld貸方取引先コード,
			仕訳.Fld貸方取引先名,
			仕訳.Fld貸方取引先ショートカット1,
			仕訳.Fld貸方取引先ショートカット2,
			仕訳.Fld貸方品目,
			仕訳.Fld貸方品目ショートカット1,
			仕訳.Fld貸方品目ショートカット2,
			仕訳.Fld貸方補助科目名,
			仕訳.Fld貸方補助科目ショートカット1,
			仕訳.Fld貸方補助科目ショートカット2,
			仕訳.Fld貸方部門,
			仕訳.Fld貸方部門ショートカット1,
			仕訳.Fld貸方部門ショートカット2,
			仕訳.Fld貸方メモ,
			仕訳.Fld貸方メモショートカット1,
			仕訳.Fld貸方メモショートカット2,
			仕訳.Fld貸方セグメント1,
			仕訳.Fld貸方セグメント1ショートカット1,
			仕訳.Fld貸方セグメント1ショートカット2,
			仕訳.Fld貸方セグメント2,
			仕訳.Fld貸方セグメント2ショートカット1,
			仕訳.Fld貸方セグメント2ショートカット2,
			仕訳.Fld貸方セグメント3,
			仕訳.Fld貸方セグメント3ショートカット1,
			仕訳.Fld貸方セグメント3ショートカット2,
			仕訳.Fld貸方備考,
			仕訳.Fld決算整理仕訳,
			仕訳.Fld発行元,
			仕訳.Fld作成日時,
			仕訳.Fld更新日時,
			仕訳.Fld承認状況仕訳承認,
			仕訳.Fld申請者仕訳承認,
			仕訳.Fld申請日時仕訳承認,
			仕訳.Fld承認者仕訳承認,
			仕訳.Fld承認日時仕訳承認,
			仕訳.Fld作成者,
			仕訳.Fld消費税経理処理方法,
			仕訳.Fld取引ID,
			仕訳.Fld口座振替ID,
			仕訳.Fld振替伝票ID,
			仕訳.Fld仕訳ID,
			仕訳.Fld仕訳番号,
			仕訳.Fld期末日取引フラグ,
			仕訳.Fld取引支払日,
			仕訳.Fld仕訳行番号,
			仕訳.Fld仕訳行数,
			仕訳.Fldレコード番号,
			仕訳.Fld取引内容,
			仕訳.Fld登録した方法,
			仕訳.Fld経費精算申請番号,
			仕訳.Fld支払依頼申請番号,
		)
		if err != nil {
			tx.Rollback()
			return fmt.Errorf("データ挿入エラー: %w", err)
		}
	}

	// 仕訳詳細テーブル洗い替え
	// 仕訳詳細テーブルの内容をクリア (SQLite3では TRUNCATE がないため DELETE FROM を使用)
	_, err = tx.Exec("DELETE FROM 仕訳詳細")
	if err != nil {
		tx.Rollback()
		return fmt.Errorf("テーブルクリアエラー: %w", err)
	}

	// INSERT用のプレースホルダーとフィールド名を構築
	fields = []string{
		"仕訳ID",
		"仕訳行番号",
		"計上年月",
		"コストプール",
		"按分ルール1",
		"按分ルール2",
	}
	placeholders = make([]string, len(fields))
	for i := range placeholders {
		placeholders[i] = "?"
	}

	cmd2 := fmt.Sprintf(`INSERT INTO 仕訳詳細 (%s) VALUES (%s)`,
		strings.Join(fields, ", "),
		strings.Join(placeholders, ", "))

	// プリペアードステートメント作成
	stmt2, err := tx.Prepare(cmd2)
	if err != nil {
		tx.Rollback()
		return fmt.Errorf("プリペアードステートメント作成エラー: %w", err)
	}
	defer stmt2.Close()

	// 各仕訳詳細データを挿入
	for _, 仕訳 := range 仕訳一覧 {
		if 仕訳.Val仕訳詳細 != nil {
			_, err = stmt2.Exec(
				仕訳.Fld仕訳ID,
				仕訳.Fld仕訳行番号,
				仕訳.Fld計上年月,
				仕訳.Fldコストプール,
				仕訳.Fld按分ルール1,
				仕訳.Fld按分ルール2,
			)
			if err != nil {
				tx.Rollback()
				return fmt.Errorf("データ挿入エラー: %w", err)
			}
		}
	}

	// トランザクションをコミット
	if err = tx.Commit(); err != nil {
		return fmt.Errorf("トランザクションコミットエラー: %w", err)
	}

	return nil
}

// FindAll はデータベースから全ての仕訳データを取得します
func (r *repo仕訳) FindAll() ([]*domain.Ent仕訳, error) {
	// 全ての仕訳データを取得するクエリ
	rows, err := r.db.Query(`
SELECT
    仕訳.番号
    , 仕訳.取引日
    , 仕訳.管理番号
    , 仕訳.借方勘定科目
    , 仕訳.借方決算書表示名
    , 仕訳.借方勘定科目ショートカット1
    , 仕訳.借方勘定科目ショートカット2
    , 仕訳.借方金額
    , 仕訳.借方税区分
    , 仕訳.借方税金額
    , 仕訳.借方内税外税
    , 仕訳.借方税率
    , 仕訳.借方軽減税率有無
    , 仕訳.借方取引先コード
    , 仕訳.借方取引先名
    , 仕訳.借方取引先ショートカット1
    , 仕訳.借方取引先ショートカット2
    , 仕訳.借方品目
    , 仕訳.借方品目ショートカット1
    , 仕訳.借方品目ショートカット2
    , 仕訳.借方補助科目名
    , 仕訳.借方補助科目ショートカット1
    , 仕訳.借方補助科目ショートカット2
    , 仕訳.借方部門
    , 仕訳.借方部門ショートカット1
    , 仕訳.借方部門ショートカット2
    , 仕訳.借方メモ
    , 仕訳.借方メモショートカット1
    , 仕訳.借方メモショートカット2
    , 仕訳.借方セグメント1
    , 仕訳.借方セグメント1ショートカット1
    , 仕訳.借方セグメント1ショートカット2
    , 仕訳.借方セグメント2
    , 仕訳.借方セグメント2ショートカット1
    , 仕訳.借方セグメント2ショートカット2
    , 仕訳.借方セグメント3
    , 仕訳.借方セグメント3ショートカット1
    , 仕訳.借方セグメント3ショートカット2
    , 仕訳.借方備考
    , 仕訳.貸方勘定科目
    , 仕訳.貸方決算書表示名
    , 仕訳.貸方勘定科目ショートカット1
    , 仕訳.貸方勘定科目ショートカット2
    , 仕訳.貸方金額
    , 仕訳.貸方税区分
    , 仕訳.貸方税金額
    , 仕訳.貸方内税外税
    , 仕訳.貸方税率
    , 仕訳.貸方軽減税率有無
    , 仕訳.貸方取引先コード
    , 仕訳.貸方取引先名
    , 仕訳.貸方取引先ショートカット1
    , 仕訳.貸方取引先ショートカット2
    , 仕訳.貸方品目
    , 仕訳.貸方品目ショートカット1
    , 仕訳.貸方品目ショートカット2
    , 仕訳.貸方補助科目名
    , 仕訳.貸方補助科目ショートカット1
    , 仕訳.貸方補助科目ショートカット2
    , 仕訳.貸方部門
    , 仕訳.貸方部門ショートカット1
    , 仕訳.貸方部門ショートカット2
    , 仕訳.貸方メモ
    , 仕訳.貸方メモショートカット1
    , 仕訳.貸方メモショートカット2
    , 仕訳.貸方セグメント1
    , 仕訳.貸方セグメント1ショートカット1
    , 仕訳.貸方セグメント1ショートカット2
    , 仕訳.貸方セグメント2
    , 仕訳.貸方セグメント2ショートカット1
    , 仕訳.貸方セグメント2ショートカット2
    , 仕訳.貸方セグメント3
    , 仕訳.貸方セグメント3ショートカット1
    , 仕訳.貸方セグメント3ショートカット2
    , 仕訳.貸方備考
    , 仕訳.決算整理仕訳
    , 仕訳.発行元
    , 仕訳.作成日時
    , 仕訳.更新日時
    , 仕訳.承認状況仕訳承認
    , 仕訳.申請者仕訳承認
    , 仕訳.申請日時仕訳承認
    , 仕訳.承認者仕訳承認
    , 仕訳.承認日時仕訳承認
    , 仕訳.作成者
    , 仕訳.消費税経理処理方法
    , 仕訳.取引ID
    , 仕訳.口座振替ID
    , 仕訳.振替伝票ID
    , 仕訳.仕訳ID
    , 仕訳.仕訳番号
    , 仕訳.期末日取引フラグ
    , 仕訳.取引支払日
    , 仕訳.仕訳行番号
    , 仕訳.仕訳行数
    , 仕訳.レコード番号
    , 仕訳.取引内容
    , 仕訳.登録した方法
    , 仕訳.経費精算申請番号
    , 仕訳.支払依頼申請番号
    , 仕訳詳細.計上年月
    , 仕訳詳細.コストプール
    , 仕訳詳細.按分ルール1
    , 仕訳詳細.按分ルール2 
FROM
    仕訳 
    LEFT OUTER JOIN 仕訳詳細 
        ON 仕訳.仕訳ID = 仕訳詳細.仕訳ID 
        AND 仕訳.仕訳行番号 = 仕訳詳細.仕訳行番号 
ORDER BY
    仕訳.番号
`)
	if err != nil {
		return nil, fmt.Errorf("クエリ実行エラー: %w", err)
	}
	defer rows.Close()

	var 仕訳一覧 []*domain.Ent仕訳

	for rows.Next() {
		var 仕訳 domain.Ent仕訳
		var 計上年月, コストプール, 按分ルール1, 按分ルール2 sql.NullString
		var 借方金額, 借方税金額, 借方税率 int64
		var 貸方金額, 貸方税金額, 貸方税率 int64

		// 各フィールドをスキャン
		err := rows.Scan(
			&仕訳.FldNo,
			&仕訳.Fld取引日,
			&仕訳.Fld管理番号,
			&仕訳.Fld借方勘定科目,
			&仕訳.Fld借方決算書表示名,
			&仕訳.Fld借方勘定科目ショートカット1,
			&仕訳.Fld借方勘定科目ショートカット2,
			&借方金額,
			&仕訳.Fld借方税区分,
			&借方税金額,
			&仕訳.Fld借方内税外税,
			&借方税率,
			&仕訳.Fld借方軽減税率有無,
			&仕訳.Fld借方取引先コード,
			&仕訳.Fld借方取引先名,
			&仕訳.Fld借方取引先ショートカット1,
			&仕訳.Fld借方取引先ショートカット2,
			&仕訳.Fld借方品目,
			&仕訳.Fld借方品目ショートカット1,
			&仕訳.Fld借方品目ショートカット2,
			&仕訳.Fld借方補助科目名,
			&仕訳.Fld借方補助科目ショートカット1,
			&仕訳.Fld借方補助科目ショートカット2,
			&仕訳.Fld借方部門,
			&仕訳.Fld借方部門ショートカット1,
			&仕訳.Fld借方部門ショートカット2,
			&仕訳.Fld借方メモ,
			&仕訳.Fld借方メモショートカット1,
			&仕訳.Fld借方メモショートカット2,
			&仕訳.Fld借方セグメント1,
			&仕訳.Fld借方セグメント1ショートカット1,
			&仕訳.Fld借方セグメント1ショートカット2,
			&仕訳.Fld借方セグメント2,
			&仕訳.Fld借方セグメント2ショートカット1,
			&仕訳.Fld借方セグメント2ショートカット2,
			&仕訳.Fld借方セグメント3,
			&仕訳.Fld借方セグメント3ショートカット1,
			&仕訳.Fld借方セグメント3ショートカット2,
			&仕訳.Fld借方備考,
			&仕訳.Fld貸方勘定科目,
			&仕訳.Fld貸方決算書表示名,
			&仕訳.Fld貸方勘定科目ショートカット1,
			&仕訳.Fld貸方勘定科目ショートカット2,
			&貸方金額,
			&仕訳.Fld貸方税区分,
			&貸方税金額,
			&仕訳.Fld貸方内税外税,
			&貸方税率,
			&仕訳.Fld貸方軽減税率有無,
			&仕訳.Fld貸方取引先コード,
			&仕訳.Fld貸方取引先名,
			&仕訳.Fld貸方取引先ショートカット1,
			&仕訳.Fld貸方取引先ショートカット2,
			&仕訳.Fld貸方品目,
			&仕訳.Fld貸方品目ショートカット1,
			&仕訳.Fld貸方品目ショートカット2,
			&仕訳.Fld貸方補助科目名,
			&仕訳.Fld貸方補助科目ショートカット1,
			&仕訳.Fld貸方補助科目ショートカット2,
			&仕訳.Fld貸方部門,
			&仕訳.Fld貸方部門ショートカット1,
			&仕訳.Fld貸方部門ショートカット2,
			&仕訳.Fld貸方メモ,
			&仕訳.Fld貸方メモショートカット1,
			&仕訳.Fld貸方メモショートカット2,
			&仕訳.Fld貸方セグメント1,
			&仕訳.Fld貸方セグメント1ショートカット1,
			&仕訳.Fld貸方セグメント1ショートカット2,
			&仕訳.Fld貸方セグメント2,
			&仕訳.Fld貸方セグメント2ショートカット1,
			&仕訳.Fld貸方セグメント2ショートカット2,
			&仕訳.Fld貸方セグメント3,
			&仕訳.Fld貸方セグメント3ショートカット1,
			&仕訳.Fld貸方セグメント3ショートカット2,
			&仕訳.Fld貸方備考,
			&仕訳.Fld決算整理仕訳,
			&仕訳.Fld発行元,
			&仕訳.Fld作成日時,
			&仕訳.Fld更新日時,
			&仕訳.Fld承認状況仕訳承認,
			&仕訳.Fld申請者仕訳承認,
			&仕訳.Fld申請日時仕訳承認,
			&仕訳.Fld承認者仕訳承認,
			&仕訳.Fld承認日時仕訳承認,
			&仕訳.Fld作成者,
			&仕訳.Fld消費税経理処理方法,
			&仕訳.Fld取引ID,
			&仕訳.Fld口座振替ID,
			&仕訳.Fld振替伝票ID,
			&仕訳.Fld仕訳ID,
			&仕訳.Fld仕訳番号,
			&仕訳.Fld期末日取引フラグ,
			&仕訳.Fld取引支払日,
			&仕訳.Fld仕訳行番号,
			&仕訳.Fld仕訳行数,
			&仕訳.Fldレコード番号,
			&仕訳.Fld取引内容,
			&仕訳.Fld登録した方法,
			&仕訳.Fld経費精算申請番号,
			&仕訳.Fld支払依頼申請番号,
			&計上年月,
			&コストプール,
			&按分ルール1,
			&按分ルール2,
		)
		if err != nil {
			return nil, fmt.Errorf("データ取得エラー: %w", err)
		}

		// 文字列から Decimal 型に変換
		仕訳.Fld借方金額 = decimal.NewFromInt(借方金額)
		仕訳.Fld借方税金額 = decimal.NewFromInt(借方税金額)
		仕訳.Fld借方税率 = decimal.NewFromInt(借方税率)
		仕訳.Fld貸方金額 = decimal.NewFromInt(貸方金額)
		仕訳.Fld貸方税金額 = decimal.NewFromInt(貸方税金額)
		仕訳.Fld貸方税率 = decimal.NewFromInt(貸方税率)
		// 仕訳詳細のフィールドをセット
		仕訳.Val仕訳詳細 = newVal仕訳詳細(計上年月, コストプール, 按分ルール1, 按分ルール2)
		仕訳一覧 = append(仕訳一覧, &仕訳)
	}

	if err = rows.Err(); err != nil {
		return nil, fmt.Errorf("rows反復エラー: %w", err)
	}

	return 仕訳一覧, nil
}

// domain.Repo仕訳インターフェースを実装していることを保証
var _ domain.Repo仕訳 = (*repo仕訳)(nil)

func newVal仕訳詳細(計上年月, コストプール, 按分ルール1, 按分ルール2 sql.NullString) *domain.Val仕訳詳細 {
	if !計上年月.Valid {
		return nil
	}
	return &domain.Val仕訳詳細{
		Fld計上年月:   計上年月.String,
		Fldコストプール: コストプール.String,
		Fld按分ルール1: 按分ルール1.String,
		Fld按分ルール2: 按分ルール2.String,
	}
}
